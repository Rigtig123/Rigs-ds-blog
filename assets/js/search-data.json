{
  
    
        "post0": {
            "title": "NBA Trivia",
            "content": "print(&quot;Rules: There will be a total of 10 questions starting very easy and finishing very difficult. Good luck!&quot;) . Running cells with &#39;Python 3.8.2 64-bit&#39; requires ipykernel package. Run the following command to install &#39;ipykernel&#39; into the Python environment. Command: &#39;/usr/bin/python3 -m pip install ipykernel -U --user --force-reinstall&#39; . import getpass, sys #This is a function where it acts the user a question based on what the prompt is regarding NBA Trivia def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) # This is where the user will answer their question based on the give information through the prompt variable def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg # There are four questions in quiz and you start with zero correct and gain more as the user answers questions correctly questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Ready for this NBA Quiz?&quot;) rsp = question_with_response(&quot;Who won the 2022 NBA Championship&quot;) if rsp == &quot;Golden State Warriors&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Who has the most rings in NBA History?&quot;) if rsp == &quot;Bill Russell&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What notable NBA player believes the Earth is flat?&quot;) if rsp == &quot;Kyrie Irving&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Who scored the most points in a NBA game?&quot;) if rsp == &quot;Wilt Chamberlain&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . ![]({{ site.baseurl }}/images/proof.png &quot;fast.ai&#39;s logo&quot;) .",
            "url": "https://rigtig123.github.io/Rigs-ds-blog/jupyter/2022/09/06/NBATRIVIA.html",
            "relUrl": "/jupyter/2022/09/06/NBATRIVIA.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "Lists and Dictionaries (In-Class) Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Luke Riggins&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 17 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] # *I added bash as a language* print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) # *I changed the index from 0 to 3 so that the print command will print Bash instead of Python* print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Luke Riggins &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 17 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[3] Bash &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Luke Riggins&#39;, &#39;age&#39;: 17, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Luke Riggins &lt;class &#39;str&#39;&gt; . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;luker56233@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Volkswagon Passat&quot;] }) # PUTTING MY INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Luke&quot;, &quot;LastName&quot;: &quot;Riggins&quot;, &quot;DOB&quot;: &quot;December 2&quot;, &quot;Residence&quot;: &quot;Rancho Bernardo&quot;, &quot;Email&quot;: &quot;luke120204@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota&quot;] }) # PUTTING MY PARTER&#39;S INFORMATION (HACK!) InfoDb.append({ &quot;FirstName&quot;: &quot;Jeffery&quot;, &quot;LastName&quot;: &quot;Lee&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;4S Ranch&quot;, &quot;Email&quot;: &quot;jefferyl56783@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Honda Accord&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;luker56233@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Volkswagon Passat&#39;]}, {&#39;FirstName&#39;: &#39;Luke&#39;, &#39;LastName&#39;: &#39;Riggins&#39;, &#39;DOB&#39;: &#39;December 2&#39;, &#39;Residence&#39;: &#39;Rancho Bernardo&#39;, &#39;Email&#39;: &#39;luke120204@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Toyota&#39;]}, {&#39;FirstName&#39;: &#39;Jeffery&#39;, &#39;LastName&#39;: &#39;Lee&#39;, &#39;DOB&#39;: &#39;December 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;jefferyl56783@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Honda Accord&#39;]}] . Formatted output of List/Dictionary - for loop Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Formatted output of List/Dictionary - for loop . Prepare a function to format the data . | Prepare a function to iterate through the list . | Activate your function . | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Alternate methods for iteration - while loop . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Recursion . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; . ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Creating a For Loop with Index . for indx, record in enumerate(InfoDb): print(&quot;Record #&quot; + str(indx+1) + &quot;: &quot;, end = &quot;&quot;) print_data(record) . Record #1: John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Record #2: Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat Record #3: Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Record #4: Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord . Reverse Order . for record in reversed(InfoDb): print_data(record) . Jeffery Lee Residence: 4S Ranch Birth Day: December 27 Cars: Honda Accord Luke Riggins Residence: Rancho Bernardo Birth Day: December 2 Cars: Toyota Luke Riggins Residence: San Diego Birth Day: December 2 Cars: Volkswagon Passat John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac .",
            "url": "https://rigtig123.github.io/Rigs-ds-blog/2022/09/06/Lists-and-Dictionarys.html",
            "relUrl": "/2022/09/06/Lists-and-Dictionarys.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://rigtig123.github.io/Rigs-ds-blog/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lukes Second Blog",
            "content": "Timeline for when to finish my College APPs . UC Prompts . Letters of Rec (Completed) . UC Prompt 1 (Completed) UC Prompt 4 (Completed) UC Prompt 6 (Completed) UC Prompt 7 (Completed) . Common App . UW Complete Common App supplemental essay (Completed) Complete Common App Application (Finish by September 1st) Covid Supplement (Finish by September 1st) . University of Oregon . Complete Common App supplemental essay (Completed) Complete Common App Application (Finish by September 8th) Covid Supplement (Finish by September 8th) . Boston University . Complete Common App supplemental essay (Finish by September 15th) Complete Common App Application (Finish by September 15th) Covid Supplement (Finish by September 15th) . Santa Clara . Complete Common App supplemental essay (Finish by September 22) Complete Common App Application (Finish by September 22) Covid Supplement (Finish by September 22) Complete Essay 2 (Finish by September 22) . NYU . Complete Common App supplemental essay (Finish by September 29) Complete Common App Application (Finish by September 29) Covid Supplement (Finish by September 29) Complete Essay 2 (Finish by September 29) . Indiana Bloomington . Complete Common App supplemental essay (Finish by October 6) Complete Common App Application (Finish by October 6) Covid Supplement (Finish by October 6) . USC . Complete Common App supplemental essay (Finish by October 13) Complete Common App Application (Finish by October 13) Covid Supplement (Finish by October 13) Complete Essay 2 (Finish by October 13) . University of Virginia . Complete Common App supplemental essay (Finish by October 21) Complete Common App Application (Finish by October 21) Covid Supplement (Finish by October 21) Complete Essay 2 (Finish by October 21) Complete CSS Profile (Finish by October 21) . University of Michigan . Complete Common App supplemental essay (Finish by October 28) Complete Common App Application (Finish by October 28) Covid Supplement (Finish by October 28) Complete Essay 2 (Finish by October 28) . CMC . Complete CMC Application (Finish by November 4) . ##CSU . SDSU . COmplete CSU Application (Finish by November 11) . Cal Poly SLO . Complete CSU Application (Finish by November 18) . Mcgill . Regular Decision by January 15th .",
            "url": "https://rigtig123.github.io/Rigs-ds-blog/markdown/2022/08/28/Markdown-Post-Timeline-for-College-Apps.html",
            "relUrl": "/markdown/2022/08/28/Markdown-Post-Timeline-for-College-Apps.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Lukes First Blog",
            "content": "Proof of Installations . Images . . . . .",
            "url": "https://rigtig123.github.io/Rigs-ds-blog/markdown/2022/08/28/Installation-Check.html",
            "relUrl": "/markdown/2022/08/28/Installation-Check.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Lukes Second Blog",
            "content": "Lukes Second Week Blog and Vocab List . How I used Bash to Create a Juypter Notebook . First, I created a bash notebook by selecting a New Notebook under the file menu and the sub-item allowed me to choose the notebook type as in diagram 2. The bash notebook I learned, is very similar to the Python one. I entered some code that I did in the NBA Trivia Post within a new cell and pressed Ctrl-Return to run the code. . Vocabulary List print: used to output a message on the screen. For example, print(“Hello!”) output: Hello! You only use quotations for string, which are words. def: used to identify a function input: used to take an input from the user. Input taken from the user will be converted into a string ex: input(“Enter value: “) Enter value: 1 ‘1’ variable: used to input or is considered a space for a word. For example, msg = “hi” and then I did print(msg) it will output “hi” .",
            "url": "https://rigtig123.github.io/Rigs-ds-blog/markdown/2022/08/27/How-To-Use-Bash-copy.html",
            "relUrl": "/markdown/2022/08/27/How-To-Use-Bash-copy.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Lukes First Notebook",
            "content": "print(&quot;Hello World&quot;) .",
            "url": "https://rigtig123.github.io/Rigs-ds-blog/jupyter/2022/08/22/Lukes-First-Notebook.html",
            "relUrl": "/jupyter/2022/08/22/Lukes-First-Notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Lukes First Blog",
            "content": "Lukes First Blog . Overview of Why I took this course . Hi my name is Luke Riggins and I am a current senior at Del Norte Highschool. This is my first time ever learning about computer science and I am very eager to learn more and use it in the real world. . . About Me . Here’s a list: . In my free time I like to play Basketball | I am the vice president of Del Norte Athletes Mental Health Union | President of Postgame SD club at Del Norte | I stream and play video games in my free time | . Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . . . . .",
            "url": "https://rigtig123.github.io/Rigs-ds-blog/markdown/2022/08/22/Lukes-First-Blog.html",
            "relUrl": "/markdown/2022/08/22/Lukes-First-Blog.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rigtig123.github.io/Rigs-ds-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rigtig123.github.io/Rigs-ds-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}